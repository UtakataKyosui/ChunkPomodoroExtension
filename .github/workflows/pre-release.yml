name: Pre-release Chrome Extension

on:
  push:
    branches: [develop, beta]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if available)
        run: |
          if npm run test --if-present; then
            echo "Tests passed"
          else
            echo "No tests found or tests failed"
          fi

      - name: Build extension
        run: |
          npm run build
          npm run package

      - name: Generate pre-release version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BRANCH_NAME=${GITHUB_REF##*/}
          COMMIT_SHA=${GITHUB_SHA:0:7}
          PRE_VERSION="$CURRENT_VERSION-$BRANCH_NAME.$COMMIT_SHA"
          echo "pre-version=$PRE_VERSION" >> $GITHUB_OUTPUT

      - name: Find extension package
        id: find-package
        run: |
          PACKAGE_PATH=$(find build -name "*.zip" -type f | head -1)
          echo "package-path=$PACKAGE_PATH" >> $GITHUB_OUTPUT
          echo "package-name=$(basename $PACKAGE_PATH)" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-${{ steps.version.outputs.pre-version }}
          path: ${{ steps.find-package.outputs.package-path }}
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ”§ Extension Build Ready')
            );
            
            const commentBody = `ðŸ”§ **Extension Build Ready**
            
            Preview build is available for testing:
            - **Version**: \`${{ steps.version.outputs.pre-version }}\`
            - **Artifact**: \`${{ steps.find-package.outputs.package-name }}\`
            
            ðŸ“¦ Download the build artifact from the Actions tab to test the extension locally.
            
            âœ… Build completed successfully`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }